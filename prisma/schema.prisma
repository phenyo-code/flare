generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Product model with multiple images and relation to Size model
model Product {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  price         Int
  Originalprice Int?
  category      String
  filter        String
  images        String[]
  isRecommended Boolean    @default(false)
  reviews       Review[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  CartItem      CartItem[]
  OrderItem     OrderItem[]
  sizes         Size[]     // One product can have multiple sizes

  style         String?    // Added style field
  type          String?    // Added type field
  matchesWith   String[]   // Array of strings for matching product types

  @@map("products")
}


model Size {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  size        String   // Size of the product (e.g., 'Small', 'Medium', 'Large')
  measurement String  @default("default_value")
  sold        Int      // Number of items sold for this size
  quantity    Int      // Total quantity available in stock for this size
  product     Product  @relation(fields: [productId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  CartItem    CartItem[]  
  OrderItem   OrderItem[] 
}




model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId // Link to the User
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[] // Cart can have multiple items
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  // Reference to the selected size
  sizeId    String  @db.ObjectId
  size      Size    @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  @@map("cartitems")
}


model Order {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  userId            String         @db.ObjectId // Link to the User
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingName      String
  shippingEmail     String
  shippingAddress   String
  shippingPhoneNumber String?      // Optional phone number field
  status            String         // e.g., 'pending', 'paid', 'shipped'
  totalPrice        Int
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  stripeSessionId String?
  items             OrderItem[]

  // Added field to reference the shipping address
  shippingAddressId String?        @db.ObjectId // Optional field to link to an existing address
  shippingAddressRef ShippingAddress? @relation(fields: [shippingAddressId], references: [id])

  @@map("orders")
}


model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  productId String  @db.ObjectId
  quantity  Int
  price     Int
  sizeId    String  @db.ObjectId // Add sizeId field for the selected size
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
  size      Size    @relation(fields: [sizeId], references: [id]) // Define the relationship to Size model

  @@map("orderitems")
}


model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  email      String      @unique
  password   String?
  role       String      @default("user")
  image      String? // Store Google profile image URL
  createdAt  DateTime    @default(now())
  googleUser GoogleUser? // Link to the GoogleUser model, if applicable
  Session    Session[]
  carts      Cart[] // User can have multiple carts
  orders     Order[] // User can have multiple orders

  @@map("users")
  Review Review[]
  ShippingAddress ShippingAddress[]
  PasswordResetToken PasswordResetToken[]
}

model GoogleUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  googleId  String   @unique // Google login unique ID
  name      String
  email     String   @unique
  image     String? // Google profile image (optional)
  role      String   @default("user") // Add role here
  createdAt DateTime @default(now())
  userId    String   @unique @db.ObjectId // Unique ID linking to the User model
  user      User     @relation(fields: [userId], references: [id]) // Linking to the User model

  @@map("google_users")
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

enum Fit {
  SMALL
  TRUE_TO_SIZE
  LARGE
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating     Int      
  comment    String   
  fitFeedback Fit?  // Stores whether it runs small, true to size, or large
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("reviews")
}


model ShippingAddress {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  email        String
  address      String
  phoneNumber  String
  isDefault    Boolean  @default(false)  // Allows setting a default address
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("shipping_addresses")
  Order Order[]
}

model PasswordResetToken {
  id      String   @id @default(uuid()) @map("_id")
  token   String   @unique
  userId  String   @db.ObjectId
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NewsletterSubscriber {
  id        String   @id @default(uuid()) @map("_id")
  email     String   @unique
  createdAt DateTime @default(now())
}
